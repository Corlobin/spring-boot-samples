#
# [Hibernate Validation Provider]
#
#   > http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints
#   > http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#chapter-message-interpolation
#
#   Spring Bean Validation implements JSR-303 validation by annotation and Spring Boot
#   users Hibernate as it's default implementation provider.
#
#       > https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation-spring
#
#   Hibernate Validation works by looking up the message name exactly as described
#   in the JSR-303 annotation. The benefit of having Hibernate find your message is that
#   it provides named access to the value submitted and the attributes of your constraint.
#
#       ${foo} is an EL expression (i.e., ${validatedValue}) see http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-interpolation-with-message-expressions
#       {foo} is a message parameter that correlates to attributes on your annotation by name.
#
#   For example, @NotNull has default message = {javax.validation.constraints.NotNull.message}
#   javax.validation.constraints.NotNull.message = This will override every @NotNull in your entire application
#
#   Hibernate will look in a file labeled Validation.messages for messages but we an advise it to look at this
#   file also (see ValidationConfig.java)

# Here I'm matching the message exactly what I've defined as the default message in AlphaNumeric.java
# so I can use Hibernates named parameters.
AlphaNumeric.message=${validatedValue} does not meet minimum requirements of {minDigits} digits and {minLetters} letters.


#
# [Spring MVC Validation]
#
#   Spring MVC does exactly as described above but adds one more feature to resolve message by error codes.
#
#   > https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation
#   > https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-conversion
#
#   "codes": [
#       "AlphaNumeric.user.username",
#       "AlphaNumeric.username",
#       "AlphaNumeric.java.lang.String",
#       "AlphaNumeric"
#   ]
#
#   It also provides validation that is similar but does not have the convenience of named parameters. Instead
#   the parameters are passed as an Object[] and must be accessed by array position.
#
#   *********************************************************************************************************************
#   **** THIS CODES WILL ONLY BE REFERENCED THROUGH SPRING MVC (i.e., Jsp, Thymeleaf) AND NOT IN A @RestController. *****
#   *********************************************************************************************************************
#
#   I've written a bridge to this functionality (see ErrorHandler.java and ApiError.java). You gain the ability to correlate
#   @RestController errors by ErrorCode but lose the ability to access parameters by named.
#
# These are Spring Bean Validation Messages and converted by the ErrorHandler and ApiError classes.
NotBlank=This field cannot be blank!
NotBlank.lastName=Last name is required.
Size=${0} must be between {1} and {2}.

